1. Program to illustrate process creation using fork()
c
Copy
Edit
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

int main() {
    printf("PID = %d\n", getpid());
    printf("PPID = %d\n", getppid());
    return 0;
}
Output Example:

ini
Copy
Edit
PID = 15156
PPID = 3412
2. Program to demonstrate exec() system call
First File (sc1.c)
c
Copy
Edit
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
    printf("PID of sc2.c = %d\n", getpid());

    char *args[] = {"./sc3", "hello", "ai", NULL};
    execv("./sc3", args);

    perror("execv failed");
    printf("Back to sc2.c\n");

    return 0;
}
Second File (sc3.c)
c
Copy
Edit
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
    printf("We are in sc3.c\n");
    printf("PID of sc3.c = %d\n", getpid());
    return 0;
}
Output Example:

sql
Copy
Edit
PID of sc2.c = 15187
We are in sc3.c
PID of sc3.c = 15187
3. Process creation using fork() with wait()
c
Copy
Edit
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>

int main() {
    pid_t q;
    q = fork();

    if (q < 0) {
        printf("Error\n");
    } else if (q == 0) {
        printf("Child having id %d\n", getpid());
        printf("My parent id is %d\n", getppid());
    } else {
        wait(NULL);
        printf("After wait\n");
        printf("I am parent having id %d\n", getpid());
        printf("My child id is %d\n", q);
    }
    printf("Common\n");
    
    return 0;
}
Output Example:

python
Copy
Edit
Child having id 15229
My parent id is 15228
Common
After wait
I am parent having id 15228
My child id is 15229
Common
These programs illustrate process creation, execution, and synchronization in C using fork(), exec(), and wait(). Let me know if you need explanations or modifications! ðŸš€

### **4. Process creation using `fork()`**
```c
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

int main() {
    pid_t q;
    q = fork();

    if (q < 0) {
        printf("Error\n");
    } else if (q == 0) {
        printf("Child having id %d\n", getpid());
        printf("My parent id is %d\n", getppid());
    } else {
        printf("I am parent having id %d\n", getpid());
        printf("My child id is %d\n", q);
    }
    printf("Common\n");

    return 0;
}
```

### **Expected Output:**
```
I am parent having id 15249
My child id is 15250
Common
Child having id 15250
My parent id is 15249
Common
```

### **Explanation:**
- The `fork()` system call creates a new process (child).
- The parent and child execute the code independently.
- The `if-else` checks whether the process is a child (`q == 0`) or a parent (`q > 0`).
- The `Common` statement runs in both parent and child.

This program is a simple demonstration of **process creation** in C. Let me know if you need any clarifications! ðŸš€
